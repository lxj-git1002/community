<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="Message">
<!--        select max(id) from message&lt;!&ndash;max(id)表示查询到的当前会话中id最大也就是最新的一条消息&ndash;&gt;-->
<!--        where status!=2-->
<!--        and from_id!=1-->
<!--        and (from_id=#{userId} or to_id=#{userId})-->
<!--        group by conversation_id&lt;!&ndash;根据不同的会话id进行划分&ndash;&gt;-->
        select <include refid="selectFields"></include>
        from message
        where id in
        (
             select max(id) from message<!--max(id)表示查询到的当前会话中id最大也就是最新的一条消息-->
             where status!=2
             and from_id!=1
             and (from_id=#{userId} or to_id=#{userId})
             group by conversation_id<!--根据不同的会话id进行划分-->
        )
        order by id desc
        limit #{offset},#{limit}

    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from
        (
            select max(id) as maxid from message<!--max(id)表示查询到的当前会话中id最大也就是最新的一条消息-->
            where status!=2
            and from_id!=1
            and (from_id=#{userId} or to_id=#{userId})
            group by conversation_id<!--根据不同的会话id进行划分-->
        )as m
    </select>

    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status!=2
        and from_id!=1
        and conversation_id=#{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status!=2
        and from_id!=1
        and conversation_id=#{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status=0
        and from_id!=1
        and to_id=#{userId}<!--当前用户的未读的消息，则toid一定是当前用户-->
        <if test="conversationId!=null">
            and conversation_id=#{conversationId}
        </if>
    </select>

    <insert id="insertMessage" parameterType="Message" keyProperty="id"><!--声明主键自增长-->
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateMessageStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
--        从集合中循环取出id，然后将id拼接在一个（）内，各个id之间用，隔开。
            #{id}
        </foreach>
    </update>


</mapper>
